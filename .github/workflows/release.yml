name: "Release"
on:
  release:
    types: [released]

jobs:
  setup-dotnet:
    name: Setup .NET
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "5.0.x"

  build:
    needs: [setup-dotnet]
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Clean
        run: dotnet clean

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Pack
        run: dotnet pack --configuration Release

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: Build
          path: "/home/runner/work/EliteAPI/EliteAPI/EliteAPI/bin/Release"
          if-no-files-found: error

  add-to-release:
    needs: [build]
    name: Add assets to release
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: Build

      - name: Zip release assets
        uses: TheDoctor0/zip-release@0.4.1
        with:
          filename: release.zip
          path: "./netstandard2.0/publish"

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: "release.zip"
          asset_name: "EliteAPI"
          asset_content_type: application/zip

  publish-nuget:
    needs: [build, get-version]
    name: Publish to NuGet
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: Build

      - name: Download version artifact
        uses: actions/download-artifact@v2
        with:
          name: Version

      - name: Read version information
        id: get
        run: |
          content=`cat version.json`
          echo "::set-output name=versioning::$content"

      - name: Publish project
        run: dotnet nuget push 'EliteAPI.${{fromJson(steps.get.outputs.versioning).NUGET }}.nupkg' -k ${{secrets.NUGET_KEY}} -s https://api.nuget.org/v3/index.json
